Backgrounds\SheetWhite.jpg


In short you need the const bcModSdk line, the const SDK = bcModSdk.registerMod line, 
and something like the SDK.hookFunction line but for the function you're interested in
 
 
But that is only loading your own script. You'd need the SDK in its own file and load that 
(which means an extra HTTP fetch, hence why hard-coding it in the same file is also okay)

.style.backgroundColor = "transparent"; 


reference
https://gitgud.io/zorgjeanbe/bcextensions/-/blob/master/talking.user.js

function createExitButton(imageSrc, onClick, width = "90%", height = "90%", paddingTop = "5%", paddingBottom = "5%", marginRight = "5%") {
    const exitDiv = document.createElement("div");
    exitDiv.style.width = "20%";
    exitDiv.style.height = "80%";
    exitDiv.style.display = "flex";
    exitDiv.style.alignItems = "center";
    exitDiv.style.justifyContent = "flex-end";

    const exitButton = document.createElement("button");
    exitButton.style.paddingTop = paddingTop;
    exitButton.style.paddingBottom = paddingBottom;
    exitButton.style.marginRight = marginRight;
    exitButton.style.height = "100%";
    exitButton.style.padding = "0";
    exitButton.style.display = "flex";
    exitButton.style.alignItems = "center";
    exitButton.style.justifyContent = "center";

    const exitButtonImg = document.createElement("img");
    exitButtonImg.src = imageSrc;
    exitButtonImg.style.maxWidth = width;
    exitButtonImg.style.maxHeight = height;
    exitButtonImg.style.objectFit = "contain";
    exitButtonImg.style.display = "block";

    exitDiv.appendChild(exitButton);
    exitButton.appendChild(exitButtonImg);

    // Добавляем обработчик клика
    exitButton.addEventListener("click", onClick);

    return exitDiv; // Возвращаем созданный элемент
}

// Пример использования функции для создания кнопок
const button1 = createExitButton(BCExitIconPath, () => {
    console.log("Button 1 clicked!");
}, "90%", "90%", "5%", "5%", "5%");

const button2 = createExitButton("Icons/OtherIcon.png", () => {
    console.log("Button 2 clicked!");
}, "80%", "80%", "10%", "10%", "10%");

// Добавляем кнопки в родительский элемент
document.body.appendChild(button1);
document.body.appendChild(button2);



function createTextButton(text, widthPercentage, heightPercentage, paddingTop = "5%", paddingBottom = "5%", onClickHandler) {
  const buttonDiv = document.createElement("div");
  buttonDiv.style.width = `${widthPercentage}%`;
  buttonDiv.style.height = `${heightPercentage}%`;
  buttonDiv.style.display = "flex";
  buttonDiv.style.alignItems = "center";
  buttonDiv.style.justifyContent = "flex-end";

  const textButton = document.createElement("button");
  textButton.style.paddingTop = paddingTop;
  textButton.style.paddingBottom = paddingBottom;
  textButton.style.height = "100%";
  textButton.style.padding = "0";
  textButton.style.display = "flex";
  textButton.style.alignItems = "center";
  textButton.style.justifyContent = "center";
  textButton.style.border = "none"; // Убираем границу кнопки
  textButton.style.background = "red"; // Цвет фона кнопки
  textButton.textContent = text; // Устанавливаем текст кнопки
  textButton.onclick = onClickHandler; // Устанавливаем обработчик события клика

  buttonDiv.appendChild(textButton);
  return buttonDiv;
}

// Пример использования
const myTextButton = createTextButton("Нажми меня", 20, 80, "5%", "5%", () => {
  console.log("Кнопка нажата!");
});
document.body.appendChild(myTextButton);

